OBJECT Codeunit 50198 Git Functions
{
  OBJECT-PROPERTIES
  {
    Version List=Git;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ConvertToUTFFromFolderToRepo(SelectFolder);
          END;

  }
  CODE
  {
    VAR
      LocalRepoPath@1000000011 : Text[250];
      LocalTempPath@1000000012 : Text[250];
      LocalTempUTFPath@1000000014 : Text[250];
      LocalTempCountryPath@1000000022 : Text[250];
      SkippedText@1000000049 : Text[250];
      Window@1000000038 : Dialog;
      Initialized@1000000051 : Boolean;
      TwoParams@1000000037 : TextConst 'ENU=%1 %2';
      FilePathMaskTxt@1000000000 : TextConst 'ENU=%1\%2';
      ObjectFileMaskTxt@1000000020 : TextConst 'ENU=%1%2.txt';
      ExportCompletedMsg@1000000003 : TextConst 'ENU=Export completed.';
      ImportCompletedMsg@1000000019 : TextConst 'ENU=Import completed.';
      ObjectsRestoredMsg@1000000044 : TextConst 'ENU=Objects restored.';
      ExportSelectFolderTxt@1000000024 : TextConst 'ENU=Please select folder to export files:';
      NavTempTxt@1000000013 : TextConst 'ENU=NavTemp';
      NavTempCountryTxt@1000000021 : TextConst 'ENU=NavTempCountry';
      NavTempUTFTxt@1000000009 : TextConst 'ENU=NavTempUTF';
      CreateTempDirsCmd@1000000039 : TextConst 'ENU=\Tools\CMD\CreateTempDirs.bat';
      GitBranchCmd@1000000026 : TextConst 'ENU=cmd.exe /C git branch --show-current';
      GitCheckoutMasterCmd@1000000036 : TextConst 'ENU=cmd.exe /C git checkout master %1';
      ObjectFilePrefix@1000000002 : TextConst 'ENU=TAB,FOR,REP,DAT,COD,XML,MEN,PAG';
      ObjectAppPathTxt@1000000033 : TextConst 'ENU=\App\%1\%2';
      ProjectDataDocPathTxt@1000000015 : TextConst 'ENU=%1\Tools\ProjectData\%2.xml';
      ProjectDataPathTxt@1000000010 : TextConst 'ENU=%1\Tools\ProjectData';
      ProcessingFilesToRepoTxt@1000000031 : TextConst 'ENU=Processing files in folder to repository\\';
      NoProjectFileFoundErr@1000000007 : TextConst 'ENU=No Project XML file found at %1.';
      ImportingFileStr@1000000034 : TextConst 'ENU=Importing file:\#1####################';
      ProcessingFileStr@1000000008 : TextConst 'ENU=Processing file:\#1####################';
      ExportSelObjsTxt@1000000035 : TextConst 'ENU=%1 objects selected for export.\\Proceed?';
      ImportSelObjsTxt@1000000045 : TextConst 'ENU=%1 objects selected for import.\\Proceed?';
      RestoreSelObjsTxt@1000000006 : TextConst 'ENU=%1 objects selected for restoring.\\Proceed?';
      ImportAllFilesTxt@1000000040 : TextConst 'ENU=Warning!\Importing all files will overwrite database objects.\\Are you sure to import all files from repository?';
      ExportAllFilesTxt@1000000042 : TextConst 'ENU=Export all object to repository?';
      RepoNotFoundErr@1000000005 : TextConst 'ENU=Repository not found.\Please do not use Navision with VPN for this kind of actions.';
      ImportCompletedSkipTxt@1000000050 : TextConst 'ENU=Import Competed, but the following objects were not found:\%1';
      FolderNotSelectedErr@1000000025 : TextConst 'ENU=Folder was not selected.';
      CheckoutToGitBranchErr@1000000028 : TextConst 'ENU=Your current branch is not for this Project.\\Please do git checkout to %1.';

    PROCEDURE ConvertToUTFFromFolderToRepo@1000000021(FolderPath@1000000005 : Text[250]);
    VAR
      FileRec@1000000004 : Record 2000000022;
      FileSystemObject@1000000003 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      CopyFromPath@1000000002 : Text[1024];
      CopyToPath@1000000001 : Text[1024];
    BEGIN
      // Takes files in folder, convert them to UTF-8 and place to repository automatically

      InitializeUser(TRUE);
      InitFileSystemObject(FileSystemObject);

      FileRec.SETRANGE(Path,FolderPath);
      FileRec.SETRANGE("Is a file",TRUE);
      IF FileRec.FINDSET THEN BEGIN
        Window.OPEN(ProcessingFilesToRepoTxt + ProcessingFileStr);
        REPEAT
          Window.UPDATE(1,FileRec.Name);
          CopyFromPath := FileSystemObject.BuildPath(FileRec.Path,FileRec.Name);
          CopyToPath := LocalRepoPath + GetRepoPathForFile(FileRec.Name);
          StreamFileToUTF(CopyFromPath,CopyToPath);
        UNTIL FileRec.NEXT = 0;
        Window.CLOSE;
      END;
      CLEAR(FileSystemObject);
    END;

    PROCEDURE ExportProjectToFolderAsText@1000000009(ProjectNo@1000000001 : Code[10]);
    VAR
      ProjectLine@1000000000 : Record 50035;
      FolderSelected@1000000002 : Text[250];
    BEGIN
      // Export project objects to a folder selected with no encoding conversion.

      FolderSelected := SelectFolder;
      FilterProjectLines(ProjectLine,ProjectNo);
      WITH ProjectLine DO
        IF FINDSET THEN
          REPEAT
            ExportObjectToFolder("Object Type","Object ID",FolderSelected);
          UNTIL NEXT = 0;
    END;

    PROCEDURE ExportProjectToRepository@1000000004(ProjectNo@1000000000 : Code[10]);
    VAR
      ProjectLine@1000000001 : Record 50035;
    BEGIN
      // Export project objects to local repo

      FilterProjectLines(ProjectLine,ProjectNo);
      InitializeUser(TRUE);
      CheckGitBranchSelected(ProjectNo);

      IF NOT CONFIRM(ExportAllFilesTxt) THEN
        EXIT;

      ExportLinesLoop(ProjectLine);
    END;

    PROCEDURE ExportProjectLinesToRepo@1000000000(VAR ProjectLine@1000000000 : Record 50035;ProjectNo@1000000001 : Code[10]);
    BEGIN
      // Export selected project objects to local repo

      FilterProjectLines(ProjectLine,ProjectNo);
      InitializeUser(TRUE);
      CheckGitBranchSelected(ProjectNo);

      IF NOT CONFIRM(ExportSelObjsTxt,TRUE,ProjectLine.COUNT) THEN
        EXIT;

      ExportLinesLoop(ProjectLine);
    END;

    LOCAL PROCEDURE ExportLinesLoop@1000000001(VAR ProjectLine@1000000000 : Record 50035);
    BEGIN
      WITH ProjectLine DO
        IF FINDSET THEN BEGIN
          Window.OPEN(ProcessingFileStr);
          REPEAT
            CALCFIELDS("Object Name");
            Window.UPDATE(1,FORMAT("Object Type") + ' ' + "Object Name");
            SLEEP(50);
            ExportFileToRepo("Object Type","Object ID",FALSE,'');
          UNTIL NEXT = 0;
          Window.CLOSE;
          MESSAGE(ExportCompletedMsg);
        END;
    END;

    PROCEDURE ExportFileToRepo@1000000017(ObjectType@1000000001 : Option;ObjectID@1000000000 : Integer;CheckBranch@1000000005 : Boolean;ProjectNo@1000000004 : Code[10]);
    VAR
      CopyFromPath@1000000003 : Text[1024];
      CopyToPath@1000000002 : Text[1024];
    BEGIN
      // Skip if Object not found

      IF NOT ExportObjectToTemp(ObjectType,ObjectID) THEN
        EXIT;

      CopyFromPath := CreateObjectFilePath(ObjectType,ObjectID,LocalTempPath);

      CopyToPath := LocalRepoPath + GetRepoPathForObject(ObjectType,ObjectID);
      StreamFileToUTF(CopyFromPath,CopyToPath);
    END;

    LOCAL PROCEDURE FilterProjectLines@1000000027(VAR ProjectLine@1000000000 : Record 50035;ProjectNo@1000000001 : Code[10]);
    BEGIN
      ProjectLine.SETRANGE("Project No.",ProjectNo);
      ProjectLine.SETFILTER(
        "Object Type",'<>%1&<>%2',
        ProjectLine."Object Type"::" ",ProjectLine."Object Type"::MenuSuite);
      ProjectLine.SETFILTER("Object ID",'>%1',0);
    END;

    PROCEDURE RestoreObjectsFromMaster@1000000033(VAR ProjectLine@1000000000 : Record 50035;ProjectNo@1000000003 : Code[10]);
    VAR
      WshShell@1000000002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      FilePath@1000000001 : Text[250];
    BEGIN
      // Restore objects to a state equal to master branch

      FilterProjectLines(ProjectLine,ProjectNo);

      IF NOT CONFIRM(RestoreSelObjsTxt,TRUE,ProjectLine.COUNT) THEN
        EXIT;

      InitializeUser(TRUE);
      CheckGitBranchSelected(ProjectNo);

      WITH ProjectLine DO
        IF FINDSET THEN BEGIN
          Window.OPEN(ProcessingFileStr);
          CREATE(WshShell);
          WshShell.CurrentDirectory := LocalRepoPath;
          REPEAT
            CALCFIELDS("Object Name");
            Window.UPDATE(1,FORMAT("Object Type") + ' ' + "Object Name");
            FilePath := LocalRepoPath + GetRepoPathForObject("Object Type","Object ID");
            WshShell.Exec(STRSUBSTNO(GitCheckoutMasterCmd,FilePath));
            SLEEP(500);
          UNTIL NEXT = 0;
          CLEAR(WshShell);
          Window.CLOSE;
          MESSAGE(ObjectsRestoredMsg);
        END;
    END;

    LOCAL PROCEDURE CreateObjectFilePath@1000000003(ObjectType@1000000006 : Option;ObjectID@1000000004 : Integer;FilePath@1000000005 : Text[1024]) : Text[1024];
    VAR
      ObjectFileName@1000000000 : Text[30];
    BEGIN
      ObjectFileName := MakeObjectFileName(ObjectType,ObjectID);
      EXIT(STRSUBSTNO(FilePathMaskTxt,FilePath,ObjectFileName));
    END;

    PROCEDURE GetBaseFileName@1000000007(FilePath@1000000000 : Text[1024]) ReturnValue : Text[250];
    VAR
      FileSystemObject@1000000001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
    BEGIN
      InitFileSystemObject(FileSystemObject);
      ReturnValue := FileSystemObject.GetBaseName(FilePath);
      CLEAR(FileSystemObject);
      EXIT(ReturnValue);
    END;

    PROCEDURE ImportToProjectFromRepo@1000000008(ProjectNo@1000000000 : Code[10]);
    VAR
      ProjectLine@1000000003 : Record 50035;
    BEGIN
      IF NOT CONFIRM(ImportAllFilesTxt) THEN
        EXIT;

      InitializeUser(TRUE);
      CheckGitBranchSelected(ProjectNo);
      FilterProjectLines(ProjectLine,ProjectNo);
      ImportLinesLoop(ProjectLine);
    END;

    PROCEDURE ImportProjectLinesFromRepo@1000000035(VAR ProjectLine@1000000000 : Record 50035;ProjectNo@1000000001 : Code[10]);
    BEGIN
      // Import selected project objects to local repo

      InitializeUser(TRUE);
      CheckGitBranchSelected(ProjectNo);
      FilterProjectLines(ProjectLine,ProjectNo);

      IF NOT CONFIRM(ImportSelObjsTxt,TRUE,ProjectLine.COUNT) THEN
        EXIT;

      ImportLinesLoop(ProjectLine);
    END;

    LOCAL PROCEDURE ImportLinesLoop@1000000039(VAR ProjectLine@1000000000 : Record 50035);
    BEGIN
      WITH ProjectLine DO
        IF FINDSET THEN BEGIN
          SkippedText := '';
          Window.OPEN(ProcessingFileStr);
          REPEAT
            CALCFIELDS("Object Name");
            Window.UPDATE(1,FORMAT("Object Type") + ' ' + "Object Name");
            ImportFileFromRepo("Object Type","Object ID");
          UNTIL NEXT = 0;
          Window.CLOSE;
          IF SkippedText = '' THEN
            MESSAGE(ImportCompletedMsg)
          ELSE
            MESSAGE(ImportCompletedSkipTxt,SkippedText);
        END;
    END;

    PROCEDURE ImportFileFromRepo@1000000040(ObjectType@1000000001 : Option;ObjectID@1000000000 : Integer);
    VAR
      CopyFromPath@1000000002 : Text[250];
      CopyToPath@1000000003 : Text[250];
    BEGIN
      CopyFromPath := LocalRepoPath + GetRepoPathForObject(ObjectType,ObjectID);

      IF NOT EXISTS(CopyFromPath) THEN
        IF SkippedText = '' THEN
          SkippedText := GetBaseFileName(CopyFromPath)
        ELSE
          SkippedText += ', ' + GetBaseFileName(CopyFromPath);

      CopyToPath := STRSUBSTNO(FilePathMaskTxt,LocalTempCountryPath,MakeObjectFileName(ObjectType,ObjectID));
      StreamFileToCountry(CopyFromPath,CopyToPath);

      IMPORTOBJECTS(CopyToPath);
    END;

    LOCAL PROCEDURE GetRepoPathForFile@1000000029(FileName@1000000001 : Text[250]) : Text[250];
    VAR
      ObjectTypeFolderText@1000000002 : ',Table,Form,Report,Dataport,Codeunit,XMLPort,Menu,Page';
      ObjectType@1000000000 : Option;
    BEGIN
      GetObjectTypeFromFileName(FileName,ObjectType);
      ObjectTypeFolderText := ObjectType;
      EXIT(STRSUBSTNO(ObjectAppPathTxt,ObjectTypeFolderText,FileName));
    END;

    LOCAL PROCEDURE GetRepoPathForObject@1000000002(ObjectType@1000000001 : Option;ObjectID@1000000003 : Integer) : Text[250];
    VAR
      ObjectTypeFolderText@1000000002 : ',Table,Form,Report,Dataport,Codeunit,XMLPort,Menu,Page';
    BEGIN
      ObjectTypeFolderText := ObjectType;
      EXIT(STRSUBSTNO(ObjectAppPathTxt,ObjectTypeFolderText,MakeObjectFileName(ObjectType,ObjectID)));
    END;

    LOCAL PROCEDURE ExportObjectToFolder@1000000023(ObjectType@1000000001 : Option;ObjectID@1000000000 : Integer;FolderPath@1000000004 : Text[1024]) : Boolean;
    VAR
      Object@1000000002 : Record 2000000001;
      FilePath@1000000003 : Text[1024];
    BEGIN
      IF NOT Object.GET(ObjectType,'',ObjectID) THEN
        EXIT(FALSE);

      Object.SETRECFILTER;
      FilePath := CreateObjectFilePath(ObjectType,ObjectID,FolderPath);
      EXPORTOBJECTS(FilePath,Object);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ExportObjectToTemp@1000000013(ObjectType@1000000001 : Option;ObjectID@1000000000 : Integer) : Boolean;
    BEGIN
      EXIT(ExportObjectToFolder(ObjectType,ObjectID,LocalTempPath));
    END;

    LOCAL PROCEDURE StreamFileToUTF@1000000024(FileFrom@1000000004 : Text[250];FileTo@1000000007 : Text[250]);
    BEGIN
      StreamFileFromTo(FileFrom,FileTo,'CP850','UTF-8');
    END;

    LOCAL PROCEDURE StreamFileToCountry@1000000043(FileFrom@1000000004 : Text[250];FileTo@1000000007 : Text[250]);
    BEGIN
      StreamFileFromTo(FileFrom,FileTo,'UTF-8','CP850');
    END;

    LOCAL PROCEDURE StreamFileFromTo@1000000038(FileFrom@1000000004 : Text[250];FileTo@1000000007 : Text[250];CharsetFrom@1000000006 : Text[10];CharsetTo@1000000005 : Text[10]);
    VAR
      Stream@1000000003 : Automation "{B691E011-1797-432E-907A-4D8C69339129} 6.1:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 6.1 Library'.Stream";
      StreamTo@1000000002 : Automation "{B691E011-1797-432E-907A-4D8C69339129} 6.1:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 6.1 Library'.Stream";
      TypeText@1000000001 : Integer;
      String@1000000000 : Text[1024];
    BEGIN
      TypeText := 2;

      CREATE(Stream);
      Stream.Open;
      Stream.Charset(CharsetFrom);
      Stream.LoadFromFile(FileFrom);
      Stream.Type(TypeText);

      CREATE(StreamTo);
      StreamTo.Open;
      StreamTo.Charset(CharsetTo);
      Stream.Type(TypeText);

      WHILE NOT Stream.EOS DO BEGIN
        String := Stream.ReadText(MAXSTRLEN(String));
        StreamTo.WriteText(String,0);
      END;

      StreamTo.SaveToFile(FileTo,2);

      Stream.Close;
      StreamTo.Close;
      CLEAR(Stream);
      CLEAR(StreamTo);
    END;

    LOCAL PROCEDURE RunShellExecute@1000000005(App@1000000000 : Text[1024];Param@1000000001 : Text[1024]);
    VAR
      MSCShell@1000000003 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
      Int@1000000002 : Integer;
    BEGIN
      IF CREATE(MSCShell) THEN BEGIN
        Int := 0;
        MSCShell.ShellExecute(App,Param,Int);
        CLEAR(MSCShell);
      END;
    END;

    LOCAL PROCEDURE RunShellOpen@1000000018(App@1000000000 : Text[1024]);
    VAR
      MSCShell@1000000003 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
    BEGIN
      IF CREATE(MSCShell) THEN BEGIN
        MSCShell.Open(App);
        CLEAR(MSCShell);
      END;
    END;

    LOCAL PROCEDURE InitializeUser@1000000015(CreateFolders@1000000001 : Boolean);
    VAR
      UserSetup@1000000000 : Record 91;
      FileSystemObject@1000000003 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
    BEGIN
      IF Initialized THEN
        EXIT;

      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Local Repo Path"); // Example: C:\Cronus2009
      LocalRepoPath := UserSetup."Local Repo Path";
      // Local is used in terms of localhost/local machine

      InitFileSystemObject(FileSystemObject);
      IF NOT FileSystemObject.FolderExists(LocalRepoPath) THEN
        ERROR(RepoNotFoundErr);
      CLEAR(FileSystemObject);

      Initialized := TRUE;

      IF CreateFolders THEN
        CreateTempFolders;
    END;

    LOCAL PROCEDURE CreateTempFolders@1000000012();
    BEGIN
      LocalTempPath := TEMPORARYPATH + NavTempTxt;
      LocalTempCountryPath := TEMPORARYPATH + NavTempCountryTxt;
      LocalTempUTFPath := TEMPORARYPATH + NavTempUTFTxt;

      RunShellExecute(LocalRepoPath + CreateTempDirsCmd,TEMPORARYPATH);
      SLEEP(1000); // give time to Navision to update file system data
    END;

    PROCEDURE SelectFolder@1000000010() : Text[250];
    VAR
      MSShell@1000000001 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
      MSShellFolder@1000000002 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{A7AE5F64-C4D7-4D7F-9307-4D24EE54B841}:'Microsoft Shell Controls And Automation'.Folder3";
      MSShellFiles@1000000000 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{EAA7C309-BBEC-49D5-821D-64D966CB667F}:'Microsoft Shell Controls And Automation'.FolderItems3";
      MSShellCurrentFile@1000000003 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{EDC817AA-92B8-11D1-B075-00C04FC33AA5}:'Microsoft Shell Controls And Automation'.FolderItem2";
    BEGIN
      IF ISCLEAR(MSShell) THEN
        IF NOT CREATE(MSShell) THEN
          EXIT;

      MSShellFolder := MSShell.BrowseForFolder(0,ExportSelectFolderTxt,0);
      IF ISCLEAR(MSShellFolder) THEN
        ERROR(FolderNotSelectedErr);

      MSShellFiles := MSShellFolder.Items;
      MSShellCurrentFile := MSShellFiles.Item;

      EXIT(FORMAT(MSShellCurrentFile.Path));
    END;

    LOCAL PROCEDURE CheckGitBranchSelected@1000000026(ProjectNo@1000000001 : Code[20]);
    VAR
      ProjectHeader@1000000000 : Record 50034;
    BEGIN
      ProjectHeader.GET(ProjectNo);
      ProjectHeader.TESTFIELD("Git Branch");
      IF GetGitBranchName <> ProjectHeader."Git Branch" THEN
        ERROR(CheckoutToGitBranchErr,ProjectHeader."Git Branch");
    END;

    LOCAL PROCEDURE GetGitBranchName@1000000019() GitBranch : Text[250];
    VAR
      WshShell@1000000000 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      WshExec@1000000004 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{08FED191-BE19-11D3-A28B-00104BD35090}:'Windows Script Host Object Model'.WshExec";
      TextStream@1000000003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0BB02EC0-EF49-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.TextStream";
    BEGIN
      CREATE(WshShell);
      WshShell.CurrentDirectory := LocalRepoPath;
      WshExec := WshShell.Exec(GitBranchCmd);
      TextStream := WshExec.StdOut;
      GitBranch := TextStream.ReadLine;

      // Tear-down
      TextStream.Close;
      CLEAR(WshShell);
      CLEAR(WshExec);
      EXIT(GitBranch);
    END;

    LOCAL PROCEDURE CopyCurrBranchName@1000000020(VAR TextOutput@1000000000 : Text[250]) : Text[250];
    BEGIN
      IF COPYSTR(TextOutput,1,1) = '*' THEN
        EXIT(COPYSTR(TextOutput,3,STRLEN(TextOutput) - 2));
      EXIT('');
    END;

    LOCAL PROCEDURE InitFileSystemObject@1000000028(VAR FileSystemObject@1000000000 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject");
    BEGIN
      IF NOT ISCLEAR(FileSystemObject) THEN
        CLEAR(FileSystemObject);
      CREATE(FileSystemObject,TRUE,TRUE);
    END;

    LOCAL PROCEDURE GetObjectTypeFromFileName@1000000045(FileName@1000000001 : Text[30];VAR ObjectType@1000000000 : Option);
    VAR
      String@1000000002 : Text[3];
      Index@1000000003 : Integer;
    BEGIN
      String := COPYSTR(FileName,1,3);
      FOR Index := 1 TO 8 DO
        IF String = SELECTSTR(Index,ObjectFilePrefix) THEN BEGIN
          ObjectType := Index;
          EXIT;
        END;
    END;

    LOCAL PROCEDURE MakeObjectFileName@1000000014(ObjectType@1000000005 : Option;ObjectID@1000000004 : Integer) : Text[30];
    VAR
      PrefixOption@1000000003 : ',TAB,FOR,REP,DAT,COD,XML,MEN,PAG';
      Prefix@1000000002 : Text[3];
      Number@1000000001 : Text[10];
    BEGIN
      PrefixOption := ObjectType;
      Prefix := FORMAT(PrefixOption);
      Number := FORMAT(ObjectID);
      EXIT(STRSUBSTNO(ObjectFileMaskTxt,Prefix,Number));
    END;

    PROCEDURE ExportProjectXML@1000000022(ProjectNo@1000000006 : Code[10]);
    BEGIN
      InitializeUser(FALSE);

      ExportProjectFile(ProjectNo);

      MESSAGE(ExportCompletedMsg);
    END;

    PROCEDURE ExportMultipleProjectsXML@1000000037();
    VAR
      ProjectHeader@1000000005 : Record 50034;
    BEGIN
      InitializeUser(FALSE);

      IF ProjectHeader.FINDSET THEN
        REPEAT
          ExportProjectFile(ProjectHeader."No.");
        UNTIL ProjectHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportProjectFile@1000000041(ProjectNo@1000000005 : Code[10]);
    VAR
      ProjectHeader@1000000004 : Record 50034;
      ProjectImpExp@1000000003 : XMLport 50024;
      OutStream@1000000002 : OutStream;
      TempFile@1000000001 : File;
      FilePath@1000000000 : Text[250];
    BEGIN
      ProjectHeader.GET(ProjectNo);
      ProjectHeader.SETRECFILTER;

      FilePath := GetProjectFilePath(ProjectNo);

      TempFile.TEXTMODE(TRUE);
      TempFile.CREATE(FilePath);
      TempFile.CREATEOUTSTREAM(OutStream);

      ProjectImpExp.SETTABLEVIEW(ProjectHeader);
      ProjectImpExp.SETDESTINATION(OutStream);
      ProjectImpExp.EXPORT;

      TempFile.CLOSE;
      CLEAR(OutStream);
    END;

    PROCEDURE ImportProjectXML@1000000006(VAR ProjectNo@1000000003 : Code[10]);
    VAR
      FileRec@1000000000 : Record 2000000022;
    BEGIN
      InitializeUser(FALSE);

      FileRec.SETRANGE(Path,STRSUBSTNO(ProjectDataPathTxt,LocalRepoPath));
      FileRec.SETRANGE("Is a file",TRUE);
      IF NOT FileRec.FINDFIRST THEN
        ERROR(NoProjectFileFoundErr,GetProjectFilePath(ProjectNo));

      ImportProjectFile(FileRec,ProjectNo,TRUE);

      MESSAGE(ImportCompletedMsg);
    END;

    PROCEDURE ImportMultipleProjectsXML@1000000030();
    VAR
      FileRec@1000000004 : Record 2000000022;
      ProjectNo@1000000005 : Code[10];
    BEGIN
      InitializeUser(FALSE);

      FileRec.SETRANGE(Path,STRSUBSTNO(ProjectDataPathTxt,LocalRepoPath));
      FileRec.SETRANGE("Is a file",TRUE);
      FileRec.SETFILTER(Name,'%1','*.xml');
      Window.OPEN(ImportingFileStr);
      IF FileRec.FINDSET THEN
        REPEAT
          Window.UPDATE(1,FileRec.Name);
          ImportProjectFile(FileRec,ProjectNo,FALSE);
        UNTIL FileRec.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ImportProjectFile@1000000031(VAR FileRec@1000000000 : Record 2000000022;VAR ProjectNo@1000000006 : Code[10];EraseFile@1000000005 : Boolean);
    VAR
      ProjectImpExp@1000000004 : XMLport 50024;
      inStream@1000000003 : InStream;
      TempFile@1000000002 : File;
      FilePath@1000000001 : Text[250];
    BEGIN
      FilePath := STRSUBSTNO(FilePathMaskTxt,FileRec.Path,FileRec.Name);

      TempFile.OPEN(FilePath);
      TempFile.CREATEINSTREAM(inStream);

      ProjectImpExp.SETSOURCE(inStream);
      ProjectImpExp.IMPORT;
      ProjectImpExp.GetProjectNo(ProjectNo);

      TempFile.CLOSE;

      IF EraseFile THEN
        FILE.ERASE(FilePath);
    END;

    LOCAL PROCEDURE GetProjectFilePath@1000000036(ProjectNo@1000000000 : Code[10]) : Text[250];
    BEGIN
      EXIT(STRSUBSTNO(ProjectDataDocPathTxt,LocalRepoPath,ProjectNo));
    END;

    BEGIN
    {
      // By default all Navision country versions export files with national encoding.
      // It is recommended to determine one and set it in both "StreamFileToUTF" and "StreamFileToCountry" functions.
      // By default CP850 is used for European languages.
    }
    END.
  }
}

